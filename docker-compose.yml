services:
  seed:
    build:
      context: seed-data
      dockerfile: Dockerfile
    networks:
      - front-net
    depends_on:
      - nginx

  result:
    build:
      context: result
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - front-net
      - back-net
    depends_on:
      - db

  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    networks:
      - front-net
    depends_on:
      - vote-1
      - vote-2

  vote-1:
    build:
      context: vote
      dockerfile: Dockerfile
    networks:
      - front-net
      - back-net
    depends_on:
      - redis

  vote-2:
    build:
      context: vote
      dockerfile: Dockerfile
    networks:
      - front-net
      - back-net
    depends_on:
      - redis


  worker:
    build:
      context: worker
      dockerfile: Dockerfile
    networks:
      - back-net
    depends_on:
      - redis
      - db

  redis:
    image: redis:7-alpine
    volumes:
      - ./healthchecks/redis.sh:/data/redis.sh
    healthcheck:
      # test: ["CMD-SHELL", "redis-cli", "ping"]
      # Other way to check redis health
      test: ["CMD-SHELL", "sh", "/data/redis.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    networks:
      - back-net

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}'"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - back-net

networks:
  front-net:
  back-net:

volumes:
  db-data:
    driver: local